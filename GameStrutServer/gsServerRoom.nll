namespace NumbatLogic
{
	class gsServerRoom
	{
		public gsServerClient GetClientByClientId(Uint16 nClientId)
		{
			for (int i = 0; i < __pClientVector.GetSize(); i++)
			{
				gsServerClient pClient = __pClientVector.Get(i);
				if (pClient.__nClientId == nClientId)
					return pClient;
			}
			return null;
		}

		private virtual Blob** OnClientJoin(gsServerClient pClient)
		{
			return new Blob(true);
		}

		private virtual void OnClientLeave(gsServerClient pClient)
		{

		}

		public virtual void OnSync(Uint32 nSyncId, Int32 nSyncType, Blob pInBlob, gsServerClient pServerClient)
		{
			///return null;
		}

		// SEKRIT
		public Uint32 __nRoomId;
		public Int32 __nRoomType;
		public InternalString* __sRoomType;
		public bool __bPrimary;
		public gsServer __pServer;
		public Vector<gsServerClient>* __pClientVector;

		public construct(Uint32 nRoomId, string sxRoomType, gsServer pServer)
		{
			__nRoomId = nRoomId;
			__nRoomType = ExternalString::GetChecksum(sxRoomType);
			__sRoomType = own new InternalString(sxRoomType);
			__pServer = pServer;
			__pClientVector = own new Vector<gsServerClient>();
		}
		
		public void __ClientJoin(gsServerClient pClient)
		{
			Assert::Plz(GetClientByClientId(pClient.__nClientId) == null);

			__pClientVector.PushBack(pClient);
			pClient.__pRoomVector.PushBack(this);
			Blob* pJoinBlob = own OnClientJoin(pClient);

			Blob* pBlob = own new Blob(true);
			BlobView pBlobView = pBlob.GetBlobView();
			pBlobView.PackUint32(__nRoomId);
			pBlobView.PackInt32(__nRoomType);
			pBlobView.PackBool(__bPrimary);
			pBlobView.PackBlob(pJoinBlob);

			pClient.Send(null, "__RoomJoin", pBlob);
		}

		public void __ClientLeave(gsServerClient pClient)
		{
			for (int i = 0; i < __pClientVector.GetSize(); i++)
			{
				if (__pClientVector.Get(i) == pClient)
				{
					OnClientLeave(pClient);
					__pClientVector.Erase(i);
					return;
				}
			}

			// client not in this room!
			Assert::Plz(false);
		}
	}
}