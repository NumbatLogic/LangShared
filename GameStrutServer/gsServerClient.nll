namespace NumbatLogic
{
	class gsServerClient
	{
		public void Send(gsServerRoom pRoom, string sxMessageType, Blob pBlob)
		{
			Blob* pSendBlob = own new Blob(true);
			BlobView pSendBlobView = pSendBlob.GetBlobView();

			Uint32 nSyncId = __nLastSyncId++;
			Int32 nMessageTypeHash = ExternalString::GetChecksum(sxMessageType);

			pSendBlobView.PackBool(false);
			pSendBlobView.PackUint32(nSyncId);
			pSendBlobView.PackUint32(pRoom == null ? 0 : pRoom.__nRoomId);
			pSendBlobView.PackInt32(nMessageTypeHash);
			pSendBlobView.PackBlob(pBlob);
			
			__pClientSocket.Send(pSendBlob);
		}


		// The new client has completed authentication, now what?
		// Perhaps do any additional fetching, and sned them to their room!
		public virtual void OnInitialJoin()
		{
		}


		// 

		public gsServerRoom GetRoomByRoomId(Uint32 nRoomId)
		{
			for (int i = 0; i < __pRoomVector.GetSize(); i++)
			{
				gsServerRoom pRoom = __pRoomVector.Get(i);
				if (pRoom.__nRoomId == nRoomId)
					return pRoom;
			}
			return null;
		}



		public void SyncRespond(Uint32 nSyncId, Blob pBlob)
		{
			Blob* pRespondBlob = own new Blob(true);
			BlobView pRespondBlobView = pRespondBlob.GetBlobView();

			pRespondBlobView.PackBool(true);
			pRespondBlobView.PackUint32(nSyncId);
			pRespondBlobView.PackBlob(pBlob);

			__pClientSocket.Send(pRespondBlob);
		}


			



		// SEKRIT


		/*Uint8 nState;

		Uint16 nNettleVersion;
		Uint16 nVersion;

		Uint32 nClientId;
		//Uint32 nReconnectToken;

		nbVector* pRoomVector;

		Uint32 nLastSyncId;

		void* pPointer;*/
	
		public Uint32 __nClientId;
		public gsServer __pServer;
		public ClientSocket __pClientSocket;
		public gsClient::State __eState;
		public Vector<gsServerRoom>* __pRoomVector;

		public Uint32 __nLastSyncId;

		public construct(Uint32 nClientId, ClientSocket pClientSocket, gsServer pServer)
		{
			__nClientId = nClientId;
			__pServer = pServer;
			__pClientSocket = pClientSocket;
			__eState = gsClient::State::CONNECT;
			__pRoomVector = own new Vector<gsServerRoom>();
		}

		public void __Update()
		{
			__pClientSocket.Update();

			switch (__eState)
			{
				case gsClient::State::CONNECT:
				{
					__eState = gsClient::State::HANDSHAKE;
					break;
				}
				case gsClient::State::HANDSHAKE:
				{
					Blob* pReceiveBlob = own __pClientSocket.Receive();
					if (pReceiveBlob != null)
					{
						const int INITIAL_SIZE = 2 + 2 + 1;
						if (pReceiveBlob.GetSize() > INITIAL_SIZE)
						{
							BlobView pRecieveBlobView = pReceiveBlob.GetBlobView();

							Uint16 nMagic = pRecieveBlobView.UnpackUint16();
							Uint16 nVersion = pRecieveBlobView.UnpackUint16();
							Uint8 nAuthMode = pRecieveBlobView.UnpackUint8();
							
							if (nMagic == gsClient::MAGIC_WORD && nVersion == __pServer.__nVersion)
							{
								// success, move to room or auth or something
								if (nAuthMode == 0)
								{
									InternalString* sName = own new InternalString("");
									InternalString* sPassword = own new InternalString("");

									if (pRecieveBlobView.UnpackInternalString(sName))
									{
										if (pRecieveBlobView.UnpackInternalString(sPassword))
										{
											// TODO: validate

											Blob* pSendBlob = own new Blob(true);
											BlobView pBlobView = pSendBlob.GetBlobView();
											pBlobView.PackUint16(gsClient::MAGIC_WORD);
											pBlobView.PackUint16(__pServer.__nVersion);
											pBlobView.PackBool(true);
											pBlobView.PackUint32(__nClientId);
											__pClientSocket.Send(pSendBlob);

											__eState = gsClient::State::CONNECTED;

											OnInitialJoin();
											break;
										}
									}
								}
							}
						}
						
						{
							Console::Log("Bad handshake, disconnecting");
							Blob* pResponseBlob = own new Blob(true);
							BlobView pResponseBlobView = pResponseBlob.GetBlobView();
							pResponseBlobView.PackUint8(gsError::Error::BAD_HANDSHAKE);
							__pClientSocket.Disconnect();
							return;
						}
					}
					else
					{
						// timeout kick
					}
					break;
				}
				case gsClient::State::CONNECTED:
				{
					Blob* pReceiveBlob = own __pClientSocket.Receive();
					if (pReceiveBlob != null)
					{
						Console::Log("blob get!");

						BlobView pReceiveBlobView = pReceiveBlob.GetBlobView();

						Uint32 nSyncId;
						Uint32 nLastSyncId;
						Uint32 nRoomId;
						Int32 nSyncType;
						Blob* pSyncBlob = own new Blob(true);
						
						if (pReceiveBlobView.SafeUnpackUint32(nSyncId)
							&& pReceiveBlobView.SafeUnpackUint32(nLastSyncId)
							&& pReceiveBlobView.SafeUnpackUint32(nRoomId)
							&& pReceiveBlobView.SafeUnpackInt32(nSyncType)
							&& pReceiveBlobView.UnpackBlob(pSyncBlob))
						{
							Console::Log("A");
							if (nRoomId > 0)
							{
								Console::Log("B");
								gsServerRoom pRoom = GetRoomByRoomId(nRoomId);

								if (!pRoom)
									Assert::Plz(false);

								pRoom.OnSync(nSyncId, nSyncType, pSyncBlob, this);

								//Uint32 nSyncId, Blob pInBlob, gsServerClient pServerClient


								
							}
							else
							{

							}


							
						}
						else
						{
							// todo: yeet client
							Assert::Plz(false);
						}
					}
					break;
				}
				case gsClient::State::DISCONNECTED:
				{
					break;
				}
				default:
				{
					Assert::Plz(false);
				}
			}
		}
	}
	
}